PShape square;  // The PShape object
PShape circle;
PShape ellipse;
PShape triangle;

float xPosition = 0;
float yPosition;
float numShapes= 1; //4, 


void setup(){
  size(600, 600);
  //smooth();
  //noStroke();
  yPosition= 0;
  
  
  square = createShape(RECT, 0, 0, 50, 50);
  square.setFill(color(0, 0, 255));
  
  circle = createShape(ELLIPSE, 0, 0, 50, 50);
  circle.setFill(color(0, 0, 255));
  
  ellipse = createShape(ELLIPSE, 0, 0, 50, 25);
  ellipse.setFill(color(100, 201, 90));
  
  triangle = createShape(TRIANGLE, 0, 0, 50, 25, 12, 34);
  triangle.setFill(color(100, 201, 90));
  background(color(232,157,59));
  

}  
void draw(){

background(color(232,157,59));
  delay(900);
    if(numShapes >= 1 ){
         shape(square,0 ,0);
       shape(circle, 0, 0);
      shape(ellipse, 0, 0);
      shape(triangle, 0, 0);
        
      
    }
    if(numShapes >= 2 ){
       shape(square,75 ,0);
       shape(circle, 75, 0);
      shape(ellipse, 75, 0);
      shape(triangle, 75, 0);
      
       shape(square,0 ,75);
       shape(circle, 0, 75);
      shape(ellipse, 0, 75);
      shape(triangle, 0, 75);
      
       shape(square,75 ,75);
       shape(circle, 75,75);
      shape(ellipse, 75,75);
      shape(triangle, 75, 75);
      
    }
    if(numShapes >= 3){
      shape(square,150 ,0);
       shape(circle, 150, 0);
      shape(ellipse, 150, 0);
      shape(triangle, 150, 0);
      
       shape(square,150 ,75);
       shape(circle, 150, 75);
      shape(ellipse, 150, 75);
      shape(triangle, 150, 75);
      
       shape(square, 150,150);
       shape(circle, 150,150);
      shape(ellipse, 150,150);
      shape(triangle, 150,150 );
      
      shape(square, 75,150);
       shape(circle, 75,150);
      shape(ellipse, 75,150);
      shape(triangle, 75,150 );
      
            shape(square, 0,150);
       shape(circle, 0,150);
      shape(ellipse, 0,150);
      shape(triangle, 0,150 );
      
    }
    
    
    //if(numShapes == 2){
   
   // }
    
// shape(square, 0+yPosition, 0+xPosition);
  // shape(circle, 0+yPosition, 0+xPosition);
 // shape(ellipse, 0+yPosition, 0+xPosition);
 // shape(triangle, 0+yPosition, 0+xPosition);
 // xPosition = xPosition + 2;
 //yPosition = yPosition + 2; 
 
 numShapes = numShapes + 1;
}
