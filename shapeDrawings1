PShape square;  // The PShape object
PShape circle;
PShape ellipse;
PShape triangle;
PShape []masterShape= new PShape[4];


float xPosition = 0;
float yPosition;
float numShapes= 0; 


void setup(){
  size(600, 600);
  yPosition= 0;
  
  square = createShape(RECT, 0, 0, 50, 50);
  square.setFill(color(0, 0, 255));
  
  circle = createShape(ELLIPSE, 0, 0, 50, 50);
  circle.setFill(color(0, 0, 255));
  
  ellipse = createShape(ELLIPSE, 0, 0, 50, 25);
  ellipse.setFill(color(100, 201, 90));
  
  triangle = createShape(TRIANGLE, 0, 0, 50, 25, 12, 34);
  triangle.setFill(color(100, 201, 90));
  
  masterShape[0]=square;
  masterShape[1]=circle;
  masterShape[2 ]=ellipse;
  masterShape[3 ]=triangle;
  
  background(color(232,157,59));
  
  
}  
void draw(){

  background(color(232,157,59));
  delay(900); //pauses between each number of shapes drawing
  float y=0;
  
  if(numShapes >= 1 ){
    y=y+0; //y=0
    shape(square,y ,y);
    shape(circle, y, y);
    shape(ellipse, y, y);
    shape(triangle, y, y);    
  }
  
  if(numShapes >= 2 ){ 
    y=y+75; //y=75
    shape(square,y ,y-75);
    shape(circle, y, y-75);
    shape(ellipse, y, y-75);
    shape(triangle, y, y-75);
      
    shape(square,y-75 ,y);
    shape(circle, y-75, y);
    shape(ellipse, y-75, y);
    shape(triangle, y-75,y);
      
    shape(square,y ,y);
    shape(circle, y,y);
    shape(ellipse, y,y);
    shape(triangle, y, y); 

  }
  if(numShapes >= 3){
    y=y+75; //y=150
    shape(square,y ,0);
    shape(circle, y, 0);
    shape(ellipse, y, 0);
    shape(triangle,y, 0);
      
    shape(square,y ,75);
    shape(circle, y, 75);
    shape(ellipse, y, 75);
    shape(triangle, y, 75);
      
    shape(square, y,y);
    shape(circle, y,y);
    shape(ellipse,y,y);
    shape(triangle, y,y );
      
    shape(square, 75,y);
    shape(circle, 75,y);
    shape(ellipse, 75,y);
    shape(triangle, 75,y );
      
    shape(square, 0,y);
    shape(circle, 0,y);
    shape(ellipse, 0,y);
    shape(triangle, 0,y );
  }
        
  if(numShapes >= 4){
    y=y+75; //y=225
    shape(square,0,y);
    shape(circle,0,y); 
    shape(ellipse,0,y); 
    shape(triangle,0,y);
  
    shape(square,75,y);
    shape(circle,75,y); 
    shape(ellipse,75,y); 
    shape(triangle,75,y);
    
    shape(square,150,y);             
    shape(circle,150,y); 
    shape(ellipse,150,y); 
    shape(triangle,150,y);         
    
    shape(square,y,y);             
    shape(circle,y,y); 
    shape(ellipse,y,y); 
    shape(triangle,y,y);      
    
    shape(square,y,150);             
    shape(circle,y,150); 
    shape(ellipse,y,150); 
    shape(triangle,y,150);      

    shape(square,y,75);             
    shape(circle,y,75); 
    shape(ellipse,y,75); 
    shape(triangle,y,75);
       
    shape(square,y,0);             
    shape(circle,y,0); 
    shape(ellipse,y,0); 
    shape(triangle,y,0);  
  }
     
  if(numShapes >= 5){
    y=y+75; //y=300
    shape(square,0, y);
    shape(circle,0,y); 
    shape(ellipse,0,y); 
    shape(triangle,0,y);
  
    shape(square,75,y);
    shape(circle,75,y); 
    shape(ellipse,75,y); 
    shape(triangle,75,y);
    
    shape(square,150,y);             
    shape(circle,150,y); 
    shape(ellipse,150,y); 
    shape(triangle,150,y);         
    
    shape(square,225,y);             
    shape(circle,225,y); 
    shape(ellipse,225,y); 
    shape(triangle,225,y);      
    
    shape(square,y,y);             
    shape(circle,y,y); 
    shape(ellipse,y,y); 
    shape(triangle,y,y);
       
    shape(square,y,225);             
    shape(circle,y,225); 
    shape(ellipse,y,225); 
    shape(triangle,y,225);
    
    shape(square,y,150);             
    shape(circle,y,150); 
    shape(ellipse,y,150); 
    shape(triangle,y,150);      

    shape(square,y,75);             
    shape(circle,y,75); 
    shape(ellipse,y,75); 
    shape(triangle,y,75);
       
    shape(square,y,0);             
    shape(circle,y,0); 
    shape(ellipse,y,0); 
    shape(triangle,y,0);  
  } 
        
  if(numShapes >= 6){
    y=y+75;//y=375
    shape(square,0, y);
    shape(circle,0,y); 
    shape(ellipse,0,y); 
    shape(triangle,0,y);
  
    shape(square,75,y);
    shape(circle,75,y); 
    shape(ellipse,75,y); 
    shape(triangle,75,y);
    
    shape(square,150,y);             
    shape(circle,150,y); 
    shape(ellipse,150,y); 
    shape(triangle,150,y);         
    
    shape(square,225,y);             
    shape(circle,225,y); 
    shape(ellipse,225,y); 
    shape(triangle,225,y);      
    
    shape(square,300,y);             
    shape(circle,300,y); 
    shape(ellipse,300,y); 
    shape(triangle,300,y);  
    
    shape(square,y,y);             
    shape(circle,y,y); 
    shape(ellipse,y,y); 
    shape(triangle,y,y);
          
    shape(square,y,300);             
    shape(circle,y,300); 
    shape(ellipse,y,300); 
    shape(triangle,y,300);
          
    shape(square,y,225);             
    shape(circle,y,225); 
    shape(ellipse,y,225); 
    shape(triangle,y,225);
    
    shape(square,y,150);             
    shape(circle,y,150); 
    shape(ellipse,y,150); 
    shape(triangle,y,150);      

    shape(square,y,75);             
    shape(circle,y,75); 
    shape(ellipse,y,75); 
    shape(triangle,y,75);
       
    shape(square,y,0);             
    shape(circle,y,0); 
    shape(ellipse,y,0); 
    shape(triangle,y,0);  
   } 
      
   if(numShapes >= 7){
    y=y+75;//y=450
    shape(square,0, y);
    shape(circle,0,y); 
    shape(ellipse,0,y); 
    shape(triangle,0,y);
  
    shape(square,75,y);
    shape(circle,75,y); 
    shape(ellipse,75,y); 
    shape(triangle,75,y);
    
    shape(square,150,y);             
    shape(circle,150,y); 
    shape(ellipse,150,y); 
    shape(triangle,150,y);         
    
    shape(square,225,y);             
    shape(circle,225,y); 
    shape(ellipse,225,y); 
    shape(triangle,225,y);      
    
    shape(square,300,y);             
    shape(circle,300,y); 
    shape(ellipse,300,y); 
    shape(triangle,300,y);  
    
    shape(square,375,y);             
    shape(circle,375,y); 
    shape(ellipse,375,y); 
    shape(triangle,375,y);  
    
    shape(square,y,y);             
    shape(circle,y,y); 
    shape(ellipse,y,y); 
    shape(triangle,y,y);
          
    shape(square,y,375);             
    shape(circle,y,375); 
    shape(ellipse,y,375); 
    shape(triangle,y,375);
          
    shape(square,y,300);             
    shape(circle,y,300); 
    shape(ellipse,y,300); 
    shape(triangle,y,300);
       
    shape(square,y,225);             
    shape(circle,y,225); 
    shape(ellipse,y,225); 
    shape(triangle,y,225);
    
    shape(square,y,150);             
    shape(circle,y,150); 
    shape(ellipse,y,150); 
    shape(triangle,y,150);      

    shape(square,y,75);             
    shape(circle,y,75); 
    shape(ellipse,y,75); 
    shape(triangle,y,75);
       
    shape(square,y,0);             
    shape(circle,y,0); 
    shape(ellipse,y,0); 
    shape(triangle,y,0);  
   } 
   if(numShapes >= 8){
    y=75+y;//y=525
    shape(square,0, y);
    shape(circle,0,y); 
    shape(ellipse,0,y); 
    shape(triangle,0,y);
  
    shape(square,75,y);
    shape(circle,75,y); 
    shape(ellipse,75,y); 
    shape(triangle,75,y);
    
    shape(square,150,y);             
    shape(circle,150,y); 
    shape(ellipse,150,y); 
    shape(triangle,150,y);         
    
    shape(square,225,y);             
    shape(circle,225,y); 
    shape(ellipse,225,y); 
    shape(triangle,225,y);      
    
    shape(square,300,y);             
    shape(circle,300,y); 
    shape(ellipse,300,y); 
    shape(triangle,300,y);  
    
    shape(square,375,y);             
    shape(circle,375,y); 
    shape(ellipse,375,y); 
    shape(triangle,375,y);  
     
    shape(square,450,y);             
    shape(circle,450,y); 
    shape(ellipse,450,y); 
    shape(triangle,450,y);
    
    shape(square,y,y);             
    shape(circle,y,y); 
    shape(ellipse,y,y); 
    shape(triangle,y,y);
    
    shape(square,y,450);             
    shape(circle,y,450); 
    shape(ellipse,y,450); 
    shape(triangle,y,450);
          
    shape(square,y,375);             
    shape(circle,y,375); 
    shape(ellipse,y,375); 
    shape(triangle,y,375);
          
    shape(square,y,300);             
    shape(circle,y,300); 
    shape(ellipse,y,300); 
    shape(triangle,y,300);
       
    shape(square,y,225);             
    shape(circle,y,225); 
    shape(ellipse,y,225); 
    shape(triangle,y,225);
    
    shape(square,y,150);             
    shape(circle,y,150); 
    shape(ellipse,y,150); 
    shape(triangle,y,150);      

    shape(square,y,75);             
    shape(circle,y,75); 
    shape(ellipse,y,75); 
    shape(triangle,y,75);
       
    shape(square,y,0);             
    shape(circle,y,0); 
    shape(ellipse,y,0); 
    shape(triangle,y,0);  
   }
     
 numShapes = numShapes + 1;
}

//CAROLINE THINK AT HOME
void shapeHelper( float numShapes, float y){
  
}
